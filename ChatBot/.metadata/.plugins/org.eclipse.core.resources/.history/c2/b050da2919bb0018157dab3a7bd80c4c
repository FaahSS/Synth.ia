package dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import beans.Endereco;
import beans.Nivelamento;
import beans.Usuario;
import bo.NivelamentoBO;
import connection.Conexao;

/**
 * Esta classe manipula a tabela T_SIC_NIVELAMENTO
 * possui métodos para: Cadastrar, consultar, alterar e excluir
 * @author Fábio Salgarella
 * @version 1.0
 * @since 1.0
 * @see NivelamentoBO
 * @see NivelamentoBeans
 */
public class NivelamentoDAO {
	private Connection con;
	private PreparedStatement stmt;
	private ResultSet rs;
	
	/**
	 * Neste método construtor, estabelecemos a comunicação com o banco de dados.
	 * @author Fábio Salgarella
	 * @param não possui parâmetros
	 * @eturn não há retorno
	 * @throws Exception Chamada da exceção checked SQLException
	 */
	
	public NivelamentoDAO() throws Exception {
		con = new Conexao().conectar();
	}
	/**
	 * Responsável por adicionar uma linha na tabela T_SIC_NIVELAMENTO
	 * @param n Recebe um objeto do Tipo Nivelamento Beans
	 * @return Uma string com a mensagem de confirmação.
	 * @throws Exception Chamada da exceção checked.
	 * @author Fábio Salgarella
	 */
	
	public String gravar(Nivelamento n) throws Exception{
		PreparedStatement stmt = con.prepareStatement("INSERT INTO T_SIC_NIVELAMENTO (CD_NIVELAMENTO, NR_ACERTO, DT_NIVELAMENTO, DS_TIPO, CD_USUARIO) VALUES (?,?,?,?,?)");
		
		stmt.setInt(1, n.getCodigo());
		stmt.setInt(2, n.getAcerto());
		stmt.setString(3, n.getData());
		stmt.setString(4, n.getTipo());
		stmt.setInt(5, n.getCodigoUsuario().getCodigo());
		
		stmt.executeUpdate();
		
		return "Cadastrado com Sucesso!";
		
		
	}
	
	/**
	 * Responsável por consultar uma linha na tabela T_SIC_NIVELAMENTO
	 * @param numero Recebe um objeto do Tipo Integer.
	 * @return Uma ocorrência na tabela T_SIC_NIVELAMENTO.
	 * @throws Exception Chamada da exceção checked.
	 * @author Fábio Salgarella
	 */
	
	public Nivelamento consultarPorNumero(int numero) throws Exception{
		stmt = con.prepareStatement
				("SELECT* FROM T_SIC_NIVELAMENTO INNER JOIN T_SIC_USUARIO ON (T_SIC_NIVELAMENTO.CD_USUARIO = T_SIC_USUARIO.CD_USUARIO) WHERE CD_NIVELAMENTO=?");
		
		stmt.setInt(1, numero);
	
		rs = stmt.executeQuery();
		
		if(rs.next()) {
			return new Usuario
					(rs.getInt("NR_CLIENTE"),
				     rs.getString("NM_CLIENTE"),
					 rs.getString("DS_EMAIL"),
					 rs.getString("DS_SENHA"),
					 rs.getString("DS_SEXO"),
					 rs.getDate("DT_NASCIMENTO"),
					 rs.getString("NR_CPF"),
					 rs.getInt("NR_TIPO"),
							new Endereco(
									rs.getInt("CD_ENDERECO"),
									rs.getString("NR_CEP"),
									rs.getString("DS_UF"),
									rs.getString("DS_CIDADE"),
									rs.getString("DS_LOGRADOURO"),
									rs.getString("DS_NUMERO")
									)
							);
		}else {
			return new Usuario();
		}
	}
	
	/**
	 * Responsável por consultar várias linha na tabela T_SIC_USUARIO
	 * @param nome Recebe um objeto do Tipo String.
	 * @return Uma lista na tabela T_SIC_USUARIO.
	 * @throws Exception Chamada da exceção checked.
	 * @author Fábio Salgarella
	 */
	public List<Usuario> consultarPorNome(String nome) throws Exception{
		List<Usuario> lista = new ArrayList<Usuario>();
		stmt = con.prepareStatement
				("SELECT * FROM T_SIC_USUARIO INNER JOIN T_SIC_ENDERECO ON (T_SIC_USUARIO.CD_ENDERECO = T_SIC_ENDERECO.CD_ENDERECO) WHERE NM_CLIENTE LIKE ?");
		stmt.setString(1, "%" + nome + "%");
		
		rs = stmt.executeQuery();
		
		while(rs.next()) {
			lista.add(new Usuario
					(rs.getInt("NR_CLIENTE"),
						     rs.getString("NM_CLIENTE"),
							 rs.getString("DS_EMAIL"),
							 rs.getString("DS_SENHA"),
							 rs.getString("DS_SEXO"),
							 rs.getDate("DT_NASCIMENTO"),
							 rs.getString("NR_CPF"),
							 rs.getInt("NR_TIPO"),
									new Endereco(
											rs.getInt("CD_ENDERECO"),
											rs.getString("NR_CEP"),
											rs.getString("DS_UF"),
											rs.getString("DS_CIDADE"),
											rs.getString("DS_LOGRADOURO"),
											rs.getString("DS_NUMERO")
											)
									));	
		}
			return lista;
		
	}
	/**
	 * Responsável por apagar uma linha na tabela T_SIC_USUARIO
	 * @param numero Recebe um objeto do Tipo Integer.
	 * @return O número de linhas afetadas.
	 * @throws Exception Chamada da exceção checked.
	 * @author Fábio Salgarella
	 */
	
	public int apagar(int numero) throws Exception {
		stmt = con.prepareStatement("DELETE FROM T_SIC_USUARIO WHERE NR_CLIENTE=?");
		stmt.setInt(1, numero);
		return stmt.executeUpdate();
	}
	/**
	 * Responsável por atualizar uma linha na tabela T_SIC_USUARIO
	 * @param u Recebe um objeto do Tipo Usuario Beans.
	 * @return O número de linhas alteradas.
	 * @throws Exception Chamada da exceção checked.
	 * @author Fábio Salgarella
	 */
	public String atualizar(Usuario u) throws Exception {
		stmt = con.prepareStatement("UPDATE T_SIC_USUARIO SET NM_CLIENTE=?, DS_EMAIL=?, DS_SENHA=?, DS_SEXO=?, DT_NASCIMENTO=?, NR_CPF=?, CD_ENDERECO=?, NR_TIPO WHERE CD_USUARIO=?");
		stmt.setString(1, u.getNome());
		stmt.setString(2, u.getEmail());
		stmt.setString(3, u.getSenha());
		stmt.setString(4, u.getSexo());
		stmt.setDate(5, (Date)u.getNascimento());
		stmt.setString(6, u.getCpf());
		stmt.setInt(7, u.getEndereco().getCodigo());
		return stmt.executeUpdate() + " linhas foram afetadas!";
	}
	
}
